apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  description: Creates basic Go service with an AWS S3 bucket, a GitHub repository and ArgoCD Application. 
  name: go-app-s3
  title: Create a Go service with S3 bucket
  annotations:
    backstage.io/techdocs-ref: dir:.
  links:
    - title: Kubernetes integration
      url: https://backstage.io/docs/features/kubernetes/
    - title: GitHub integration
      url: https://backstage.io/docs/features/integrations/github/
    - title: ArgoCD integration 
      url: https://backstage.io/docs/features/argo-cd/ 
    - title: Well known Backstage annotations
      url: https://backstage.io/docs/features/software-catalog/well-known-annotations/
    - title: Backstage Software Templates 
      url: https://backstage.io/docs/features/software-templates/
       
spec:
  owner: platform
  type: service
  parameters:
    - title: Choose your repository location
      properties:
        name:
          title: Application Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
        owner:
          title: GitHub Owner of Application Repository
          default: dgeorgievski
          type: string
          description: Unique owner of the component repository
          # ui:autofocus: true
        labels:
          title: Labels
          type: object
          additionalProperties:
            type: string
          description: Labels to apply to the application
          # ui:autofocus: true
      required:
        - name
        - owner
    - title: Bucket configuration options
      type: object  
      properties:
        # apiVersion:
        #   default: awsblueprints.io/v1alpha1
        #   description: APIVersion for the resource
        #   type: string
        # kind:
        #   default: ObjectStorage
        #   description: Kind for the resource
        #   type: string
        Config:
          description: Config defines general properties of this AWS S3 Bucket.
          properties:
            deletionPolicy:
              description: Defaults to Delete
              default: Delete
              enum:
                - Delete
                - Orphan
              type: string
            region:
              default: us-east-1
              enum:
                - us-east-1
                - us-east-2
                - us-west-1
                - us-west-2
              type: string
            providerConfigName:
              type: string
              default: aws
            tags:
              items:
                properties:
                  key:
                    type: string
                  value:
                    type: string
                required:
                  - key
                  - value
                type: object
              type: array
          required:
            - region
          type: object
      required:
        - resourceConfig
  steps:
    - id: template
      name: Generating component
      action: fetch:template
      input:
        url: https://github.com/dgeorgievski/go-template
        values:
          name: ${{parameters.name}}
          owner: ${{parameters.owner}}
    
    - action: roadiehq:utils:serialize:yaml
      id: serialize
      input:
        data:
          apiVersion: awsblueprints.io/v1alpha1
          kind: ObjectStorage
          metadata:
            name: ${{ parameters.name }}
          spec: ${{ parameters.config }}
      name: serialize

    - action: roadiehq:utils:fs:write
      id: write
      input:
        content: ${{ steps['serialize'].output.serialized }}
        path: deploy/manifests/s3-${{ parameters.name }}.yaml
      name: write-to-file

    - id: publish
      name: Publishing to a github repository
      action: publish:github
      input:
        repoUrl: github.com?repo=${{parameters.name}}&owner=${{parameters.owner}}
        defaultBranch: main
        description: A Go application scaffolded by Backstage
        repoVisibility: public
        values:
          name: ${{parameters.name}}
          owner: ${{parameters.owner}}
          labels: ${{ parameters.labels }}
      
    - id: create-argocd-app
      name: Create ArgoCD App
      action: cnoe:create-argocd-app
      input:
        appName: ${{parameters.name}}
        appNamespace: ${{parameters.name}}
        argoInstance: in-cluster
        projectName: default
        repoUrl: https://github.com/${{parameters.owner}}/${{parameters.name}}
        path: "deploy/manifests"

    - id: register
      name: Register
      action: catalog:register
      input:
        catalogInfoUrl: https://github.com/${{parameters.owner}}/${{parameters.name}}/blob/main/catalog-info.yaml
        # repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        # catalogInfoPath: 'catalog-info.yaml'

  output:
    links:
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
